/*
 * generated by Xtext 2.32.0
 */
package co7217.week18.entity.serializer;

import co7217.week18.entity.entityDsl.CustomPostType;
import co7217.week18.entity.entityDsl.EntityDslPackage;
import co7217.week18.entity.entityDsl.Hook;
import co7217.week18.entity.entityDsl.Plugin;
import co7217.week18.entity.entityDsl.Setting;
import co7217.week18.entity.entityDsl.Shortcode;
import co7217.week18.entity.entityDsl.StringList;
import co7217.week18.entity.entityDsl.Widget;
import co7217.week18.entity.services.EntityDslGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class EntityDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EntityDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EntityDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EntityDslPackage.CUSTOM_POST_TYPE:
				sequence_CustomPostType(context, (CustomPostType) semanticObject); 
				return; 
			case EntityDslPackage.HOOK:
				sequence_Hook(context, (Hook) semanticObject); 
				return; 
			case EntityDslPackage.PLUGIN:
				sequence_Plugin(context, (Plugin) semanticObject); 
				return; 
			case EntityDslPackage.SETTING:
				sequence_Setting(context, (Setting) semanticObject); 
				return; 
			case EntityDslPackage.SHORTCODE:
				sequence_Shortcode(context, (Shortcode) semanticObject); 
				return; 
			case EntityDslPackage.STRING_LIST:
				sequence_StringList(context, (StringList) semanticObject); 
				return; 
			case EntityDslPackage.WIDGET:
				sequence_Widget(context, (Widget) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     CustomPostType returns CustomPostType
	 *
	 * Constraint:
	 *     (cptName=STRING cptSingularName=STRING cptSupports+=StringList? cptTaxonomies+=StringList?)
	 * </pre>
	 */
	protected void sequence_CustomPostType(ISerializationContext context, CustomPostType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Hook returns Hook
	 *
	 * Constraint:
	 *     (hookType=HookType hookName=STRING callback=STRING priority=INT? acceptedArgs=INT?)
	 * </pre>
	 */
	protected void sequence_Hook(ISerializationContext context, Hook semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Plugin returns Plugin
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         version=STRING 
	 *         description=STRING 
	 *         author=STRING 
	 *         license=STRING 
	 *         prefix=STRING 
	 *         textDomain=STRING 
	 *         activate=STRING? 
	 *         deactivate=STRING? 
	 *         uninstall=STRING? 
	 *         widgets+=Widget* 
	 *         shortcodes+=Shortcode* 
	 *         customPostTypes+=CustomPostType* 
	 *         settings+=Setting* 
	 *         hooks+=Hook*
	 *     )
	 * </pre>
	 */
	protected void sequence_Plugin(ISerializationContext context, Plugin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Setting returns Setting
	 *
	 * Constraint:
	 *     (settingName=STRING settingType=STRING defaultValue=STRING?)
	 * </pre>
	 */
	protected void sequence_Setting(ISerializationContext context, Setting semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Shortcode returns Shortcode
	 *
	 * Constraint:
	 *     (shortcodeName=STRING settings+=Setting*)
	 * </pre>
	 */
	protected void sequence_Shortcode(ISerializationContext context, Shortcode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StringList returns StringList
	 *
	 * Constraint:
	 *     (values+=STRING values+=STRING*)
	 * </pre>
	 */
	protected void sequence_StringList(ISerializationContext context, StringList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Widget returns Widget
	 *
	 * Constraint:
	 *     (widgetName=STRING widgetDescription=STRING? settings+=Setting*)
	 * </pre>
	 */
	protected void sequence_Widget(ISerializationContext context, Widget semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
